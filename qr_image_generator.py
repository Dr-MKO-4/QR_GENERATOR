#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
G√©n√©rateur de QR Code pour partager des images
Convertit une image en code QR qui permet de la r√©cup√©rer depuis n'importe quel appareil
"""

import qrcode
import base64
import os
from PIL import Image
import argparse

def image_to_base64(image_path):
    """
    Convertit une image en string base64
    """
    try:
        with open(image_path, "rb") as image_file:
            # Lire le fichier image
            image_data = image_file.read()
            # Convertir en base64
            base64_string = base64.b64encode(image_data).decode('utf-8')
            
            # D√©terminer le type MIME bas√© sur l'extension
            file_extension = os.path.splitext(image_path)[1].lower()
            mime_types = {
                '.jpg': 'image/jpeg',
                '.jpeg': 'image/jpeg',
                '.png': 'image/png',
                '.gif': 'image/gif',
                '.bmp': 'image/bmp',
                '.webp': 'image/webp'
            }
            
            mime_type = mime_types.get(file_extension, 'image/jpeg')
            
            # Cr√©er l'URL data
            data_url = f"data:{mime_type};base64,{base64_string}"
            
            return data_url
            
    except FileNotFoundError:
        print(f"Erreur: Le fichier {image_path} n'existe pas.")
        return None
    except Exception as e:
        print(f"Erreur lors de la conversion: {e}")
        return None

def create_qr_code(data, output_path="qr_code.png", size=10, border=4):
    """
    Cr√©e un code QR √† partir des donn√©es
    """
    try:
        # Cr√©er l'objet QR Code
        qr = qrcode.QRCode(
            version=1,  # Taille du QR code (1-40)
            error_correction=qrcode.constants.ERROR_CORRECT_L,  # Correction d'erreur
            box_size=size,  # Taille de chaque "pixel"
            border=border,  # Taille de la bordure
        )
        
        # Ajouter les donn√©es
        qr.add_data(data)
        qr.make(fit=True)
        
        # Cr√©er l'image
        qr_image = qr.make_image(fill_color="black", back_color="white")
        
        # Sauvegarder
        qr_image.save(output_path)
        print(f"Code QR sauvegard√© dans: {output_path}")
        
        return True
        
    except Exception as e:
        print(f"Erreur lors de la cr√©ation du QR code: {e}")
        return False

def optimize_image(image_path, max_size_kb=100):
    """
    Optimise une image pour r√©duire sa taille si n√©cessaire
    """
    try:
        with Image.open(image_path) as img:
            # V√©rifier la taille du fichier original
            original_size = os.path.getsize(image_path) / 1024  # en KB
            
            if original_size <= max_size_kb:
                return image_path
            
            # Calculer le ratio de redimensionnement
            ratio = (max_size_kb / original_size) ** 0.5
            new_width = int(img.width * ratio)
            new_height = int(img.height * ratio)
            
            # Redimensionner
            img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # Cr√©er un nouveau nom de fichier
            name, ext = os.path.splitext(image_path)
            optimized_path = f"{name}_optimized{ext}"
            
            # Sauvegarder avec compression
            if ext.lower() in ['.jpg', '.jpeg']:
                img_resized.save(optimized_path, "JPEG", quality=85, optimize=True)
            elif ext.lower() == '.png':
                img_resized.save(optimized_path, "PNG", optimize=True)
            else:
                img_resized.save(optimized_path, optimize=True)
            
            print(f"Image optimis√©e sauvegard√©e: {optimized_path}")
            print(f"Taille originale: {original_size:.1f} KB")
            print(f"Nouvelle taille: {os.path.getsize(optimized_path)/1024:.1f} KB")
            
            return optimized_path
            
    except Exception as e:
        print(f"Erreur lors de l'optimisation: {e}")
        return image_path

def main():
    parser = argparse.ArgumentParser(description='Convertit une image en code QR')
    parser.add_argument('image_path', help='Chemin vers l\'image √† convertir')
    parser.add_argument('-o', '--output', default='qr_code.png', help='Nom du fichier QR code de sortie')
    parser.add_argument('-s', '--size', type=int, default=10, help='Taille des pixels du QR code')
    parser.add_argument('--optimize', action='store_true', help='Optimiser l\'image avant conversion')
    parser.add_argument('--max-size', type=int, default=100, help='Taille maximale en KB pour l\'optimisation')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.image_path):
        print(f"Erreur: Le fichier {args.image_path} n'existe pas.")
        return
    
    image_path = args.image_path
    
    # Optimiser l'image si demand√©
    if args.optimize:
        print("Optimisation de l'image...")
        image_path = optimize_image(image_path, args.max_size)
    
    print(f"Conversion de l'image: {image_path}")
    
    # Convertir l'image en base64
    data_url = image_to_base64(image_path)
    
    if data_url is None:
        return
    
    # V√©rifier la taille des donn√©es
    data_size = len(data_url)
    print(f"Taille des donn√©es: {data_size} caract√®res")
    
    if data_size > 7000:  # Limite approximative pour les QR codes
        print("‚ö†Ô∏è  ATTENTION: Les donn√©es sont tr√®s volumineuses.")
        print("   Le QR code pourrait √™tre difficile √† scanner.")
        print("   Recommandation: utilisez --optimize pour r√©duire la taille.")
        
        response = input("Continuer quand m√™me? (o/n): ")
        if response.lower() != 'o':
            return
    
    # Cr√©er le QR code
    print("Cr√©ation du code QR...")
    success = create_qr_code(data_url, args.output, args.size)
    
    if success:
        print("\n‚úÖ Code QR cr√©√© avec succ√®s!")
        print(f"üì± Scannez le code QR '{args.output}' avec n'importe quel appareil")
        print("   pour afficher l'image directement dans le navigateur.")
        print("\nüí° Conseils:")
        print("   - Les images plus petites donnent des QR codes plus faciles √† scanner")
        print("   - Utilisez --optimize pour r√©duire automatiquement la taille")
        print("   - Le QR code fonctionne offline une fois scann√©")

if __name__ == "__main__":
    main()

# Exemple d'utilisation:
# python qr_image_generator.py mon_image.jpg
# python qr_image_generator.py mon_image.jpg --optimize --output mon_qr.png